name: Application CI pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint Source Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: npm ci
      - run: npm run lint

  test:
    name: Test the Application
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Unit Tests
        run: npm run test:unit

      - name: Build app
        run: npm run build

      - name: Run E2E Tests
        run: npm run test:e2e

  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [ lint, test ]
    outputs:
      image-version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          VERSION=$(jq -r .version package.json)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"

      - name: Authorize to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ vars.PROJECT_NAME }}:${{ env.VERSION }}
            ${{ secrets.DOCKER_USERNAME }}/${{ vars.PROJECT_NAME }}:${{ github.sha }}

  kubernetes:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: docker
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Prepare kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Authenticate to Kubernetes via OIDC
        env:
          K8S_API_SERVER: ${{ secrets.K8S_API_SERVER }}
          K8S_CA_CERT: ${{ secrets.K8S_CA_CERT }}
          OIDC_AUDIENCE: https://github.com/${{ github.repository_owner }}
        run: |
          set -euo pipefail

          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

          TOKEN=$(curl -sSf -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=${OIDC_AUDIENCE}" \
            | jq -r '.value')

          if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
            echo "Failed to obtain OIDC token"; exit 1
          fi

          echo "${K8S_CA_CERT}" > /tmp/ca.crt

          kubectl config set-cluster my-cluster \
            --server="${K8S_API_SERVER}" \
            --certificate-authority=/tmp/ca.crt \
            --embed-certs=true
          kubectl config set-credentials github-oidc --token="${TOKEN}"
          kubectl config set-context github --cluster=my-cluster --user=github-oidc
          kubectl config use-context github

      - name: Update deployment with new image
        run: |
          kubectl -n app-deploy set image deployment/indrikis-lv \
            indrikis-lv=${{ secrets.DOCKER_USERNAME }}/${{ vars.PROJECT_NAME }}:${{ needs.docker.outputs.image-version }}

      - name: Wait for rollout
        run: |
          kubectl -n app-deploy rollout status deployment/indrikis-lv --timeout=5m
